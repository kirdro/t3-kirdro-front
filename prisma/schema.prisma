// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  messages      Message[]
  // hashedPassword String?
  Authenticator Authenticator[]

  @@unique([id, image])
  @@unique([id, image, name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  published   Boolean? @default(false)
  userImg     String
  userName    String

  @@index([name])
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String
  userImg   String?
  userName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId, userImg, userName], references: [id, image, name])
  userId    String?
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Section {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  keyName   String
  path      String
  sortId    Int

  SubSection SubSection[]
}

model SubSection {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  keyName   String
  path      String
  sortId    Int
  sectionId Int
  section   Section  @relation(fields: [sectionId], references: [id])

  Product Product[]
}

model Product {
  id           Int        @id @default(autoincrement())
  name         String
  description  String
  price        Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  image        String?
  images       String[]
  // sectionId   Int
  // section     Section  @relation(fields: [sectionId], references: [id])
  subSectionId Int
  subSection   SubSection @relation(fields: [subSectionId], references: [id])
}
